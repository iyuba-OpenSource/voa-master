// top-level build file where you can add configuration options common to all sub-projects/modules.
apply from: "config.gradle"

buildscript {
    repositories {
        google()
        mavenCentral()
        maven { url 'https://jitpack.io' }
        maven { url 'https://repo1.maven.org/maven2/' }
        maven { url "https://mvn.mob.com/android" }
        maven { url 'https://developer.huawei.com/repo/' }
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:7.2.2'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:1.6.0"

        classpath 'cn.numeron:reinforcer:1.2.1'
        classpath "com.mob.sdk:MobSDK2:+"
//        classpath "com.mob.sdk:MobSDK:+"
//        classpath 'com.huawei.agconnect:agcp:1.7.3.300'

        // NOTE: Do not place your application dependencies here; they belong
        // in the individual
        //
        //
        // module build.gradle files
    }
}

allprojects {
    repositories {
        google()
        jcenter()
        mavenCentral()
        maven { url 'https://repo1.maven.org/maven2/' }
        maven { url 'https://jitpack.io' }
        maven { url "https://s01.oss.sonatype.org/content/groups/public" }
        maven { url "https://dl.bintray.com/thelasterstar/maven/" }
        maven { url 'https://developer.huawei.com/repo/' }
    }
}
task clean(type: Delete) {
    delete rootProject.buildDir
}

tasks.whenTaskAdded { task ->
    if (task.name=='mergeDebugNativeLibs') {
        task.doFirst {
            println("==========================================================")
            def v7a = []
            def arm64 = []
            it.inputs.files.each { file ->
                if (file.absolutePath.endsWith("/jni")) {
//                    println("==========" + file.absolutePath)
                    if (file.isDirectory()) {
                        file.listFiles().each { soFileDir ->
                            if (soFileDir.absolutePath.contains("armeabi-v7a")) {
                                if (soFileDir.isDirectory()) {
                                    soFileDir.listFiles().each {
                                        println(it.absolutePath)
                                        v7a.add(it.name)
                                    }
                                }
                            }
                            if (soFileDir.absolutePath.contains("arm64-v8a")) {
                                if (soFileDir.isDirectory()) {
                                    soFileDir.listFiles().each {
                                        println(it.absolutePath)
                                        arm64.add(it.name)
                                    }
                                }
                            }
                        }
                    }
                }
            }
            println("v7a size: ${v7a.size()}")
            println("arm64 size: ${arm64.size()}")
            println("so in v7a, but not in arm64:")
            v7a.each {
                if (!arm64.contains(it)) {
                    println("$it")
                }
            }
            println("==========================================================")
        }
    }
}
